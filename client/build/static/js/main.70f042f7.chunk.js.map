{"version":3,"sources":["utils/mutations.js","utils/localStorage.js","utils/auth.js","pages/SearchBooks.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","removeBookId","bookId","savedBookIds","localStorage","getItem","JSON","parse","updatedSavedBookIds","filter","savedBookId","setItem","stringify","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","idToken","window","location","assign","removeItem","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","data","log","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","savedId","onClick","QUERY_ME","SavedBooks","useQuery","loading","removeBook","userData","me","handleDeleteBook","username","savedBooks","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70f042f7.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($bookData: BookInput!) {\r\n    saveBook(bookData: $bookData) {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        description\r\n        title\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        description\r\n        title\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await saveBook({\r\n        variables: { bookData: { ...bookToSave } },\r\n      });\r\n      console.log(savedBookIds);\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedId) => savedId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some((savedId) => savedId === book.bookId)\r\n                        ? 'Book Already Saved!'\r\n                        : 'Save This Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        description\r\n        title\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { QUERY_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(QUERY_ME);\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n  const userData = data?.me || {};\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await removeBook({\r\n        variables: { bookId },\r\n      });\r\n\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing {userData.username}'s books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks?.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? 'book' : 'books'\r\n              }:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks?.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      setShowAlert(true);\r\n    } else {\r\n      setShowAlert(false);\r\n    }\r\n  }, [error]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      console.log(data);\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [login, { error }] = useMutation(LOGIN_USER);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      setShowAlert(true);\r\n    } else {\r\n      setShowAlert(false);\r\n    }\r\n  }, [error]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      console.log(data);\r\n      Auth.login(data.login.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setUserFormData({\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={SearchBooks} />\r\n            <Route exact path=\"/saved\" component={SavedBooks} />\r\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}